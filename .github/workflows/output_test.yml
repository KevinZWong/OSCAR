name: Output_Test

on: 
  push:

  workflow_dispatch:

jobs:
  job1:
    runs-on: ubuntu-latest

    outputs:
      output1: ${{ steps.step1.outputs.test }}
      output2: ${{ steps.step2.outputs.test }}
      output3: ${{ steps.step3.outputs.tagname }}

    steps:
      - id: step1
        run: echo "::set-output name=test::hello"
      - id: step2
        run: echo "::set-output name=test::world"
      - id: step3
        run: |
          tagvar=test12345
          echo "::set-output" name=tagname::$tagvar

  job2:
    runs-on: ubuntu-latest
    needs: job1
    steps:
      - run: echo ${{needs.job1.outputs.output1}} ${{needs.job1.outputs.output2}} ${{needs.job1.outputs.output3}} 

  job3:
    runs-on: ubuntu-latest
    steps:
      - run: export FOO=bar

      - run: echo $FOO

  job4:
    runs-on: ubuntu-latest
    steps:
      - run: |
          export FOO=bar
          echo "::set-env name=FOO::$FOO"

      - run: echo $FOO

  job5:
    runs-on: ubuntu-latest
    steps:
      - run: |
          export FOO=bar
          echo $FOO

  job6:
    runs-on: ubuntu-latest

    steps:
      - name: Set the value
        id: step_one
        run: |
          echo "action_state=yellow" >> $GITHUB_ENV
      - name: Use the value
        id: step_two
        run: |
          echo "${{ env.action_state }}" # This will output 'yellow'


  job7:
    runs-on: ubuntu-latest
    env:
      GUO: guo
      WONG: wong
    steps:
      - name: using env variable
        run: |
          echo ${{ env.GUO }}
          echo ${{ env.WONG }}

      - name: changing env varible
        run: |
          env.GUO=guo123
          env.WONG=wong123

      - name: print env variable
        run: |
          echo ${{ env.GUO }}
          echo ${{ env.WONG }}