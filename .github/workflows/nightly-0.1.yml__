name: Nightly Build
on:
  push:
  schedule:
    # * is a special character in YAML so you have to quote this string
    # run this build every night at 8:00pm Pacific time, 20h+(8 for UTC)
    - cron:  '0 4 * * *'
  workflow_dispatch:

env:
  LAGER_GATEWAY: ${{secrets.LAGER_GATEWAY}}
  BUILD_RUN_NUMBER: ${{ github.run_number }}
  GUO_ENV_VAR1: "guo"


jobs:
  # The goal of this job is to get the output:  0.12d17_05c88891
  # or ${VERSION_MAJOR}.${VERSION_MINOR}${VERSION_FLAVOR}${{ env.BUILD_RUN_NUMBER }}_${{ steps.get_git_sha.outputs.git_sha }}
  #   ${VERSION_MAJOR}.${VERSION_MINOR}${VERSION_FLAVOR} got from version.def file  => 0.12d
  #   ${{ env.BUILD_RUN_NUMBER }} got from ${{ github.run_number }}  => 17
  #   ${{ steps.get_git_sha.outputs.git_sha }} got from  - id: get_git_sha    => 05c88891
  #
  #   How to get the output of this job?
  #   1. needs: [get_build_name_with_sha]
  #   2. In this other jobs's steps:
  #           - run: echo ${{ needs.get_build_name_with_sha.outputs.BUILD_NAME_WITH_SHA }}
  #
  get_build_name_with_sha:
    runs-on: ubuntu-latest
    outputs:
      BUILD_NAME_WITH_SHA: ${{ steps.get_ver_prefix.outputs.ver_prefix }}${{ env.BUILD_RUN_NUMBER }}_${{ steps.get_git_sha.outputs.git_sha }}
    steps:
      - name: Checkout the code (shallow)
        uses: actions/checkout@v2
        #with:
        #  token: ${{ secrets.MACHINE_ACCESS_TOKEN }}

      - name: parse version.def
        uses: c-py/action-dotenv-to-setenv@v2
        with:
          env-file: ./version.def

      - id: get_ver_prefix
        run: echo "::set-output name=ver_prefix::${VERSION_MAJOR}.${VERSION_MINOR}${VERSION_FLAVOR}"

      - id: get_git_sha
        run: echo "::set-output name=git_sha::`echo ${GITHUB_SHA} | cut -c1-8`"

      - name: PRINT-OUT results
        run: |
          ls -al                                        # ...  -rw-r--r-- 1 runner docker   49 Oct 16 04:24 version.def   ...
          pwd                                           # /home/runner/work/OSCAR/OSCAR
          echo $SHELL                                   # /bin/bash
          uname -a    # Linux fv-az186-171 5.15.0-1021-azure #26~20.04.1-Ubuntu SMP Fri Sep 23 16:58:44 UTC 2022 x86_64 x86_64 x86_64 GNU/Linux
          cat /etc/os-release                           # ... VERSION="20.04.5 LTS (Focal Fossa)" ...

          echo ${{secrets.MACHINE_ACCESS_TOKEN}}        # ***
          echo "${{ secrets.MACHINE_ACCESS_TOKEN }}"    # ***
          echo "$secrets.MACHINE_ACCESS_TOKEN"          # .MACHINE_ACCESS_TOKEN
          echo "$MACHINE_ACCESS_TOKEN"                  # (EMPTY)

          echo ${{secrets.LAGER_GATEWAY}}               # ***
          echo ${{ env.LAGER_GATEWAY }}                 # ***
          echo "${{ env.LAGER_GATEWAY }}"               # ***
          echo "$env.LAGER_GATEWAY"                     # .LAGER_GATEWAY
          echo "$LAGER_GATEWAY"                         # ***

          echo ${{secrets.GUO_ENV_VAR1}}                # (EMPTY)
          echo ${{ env.GUO_ENV_VAR1 }}                  # guo
          echo "${{ env.GUO_ENV_VAR1 }}"                # guo
          echo "$env.GUO_ENV_VAR1"                      # .GUO_ENV_VAR1
          echo "$GUO_ENV_VAR1"                          # guo

          echo "GITHUB_ACTION:  ${GITHUB_ACTION}"       # GITHUB_ACTION:  __run

          echo "HOME:  ${HOME}"                         # HOME:  /home/runner
          echo "GITHUB_WORKSPACE:  ${GITHUB_WORKSPACE}" # GITHUB_WORKSPACE:  /home/runner/work/OSCAR/OSCAR
          echo "GITHUB_ACTIONS:  ${GITHUB_ACTIONS}"     # GITHUB_ACTIONS:  true

          echo "GITHUB_API_URL:  ${GITHUB_API_URL}"     # GITHUB_API_URL:  https://api.github.com
          echo "GITHUB_EVENT_PATH:  ${GITHUB_EVENT_PATH}"   # GITHUB_EVENT_PATH:  /home/runner/work/_temp/_github_workflow/event.json
          echo "GITHUB_JOB:  ${GITHUB_JOB}"             # GITHUB_JOB:  get_build_name_with_sha

          echo "GITHUB_REPOSITORY:  ${GITHUB_REPOSITORY}" # GITHUB_REPOSITORY:  KevinZWong/OSCAR
          echo "GITHUB_SHA:  ${GITHUB_SHA}"             # GITHUB_SHA:  6bec57ab8aab5fa723589861fc056d55ad63d719
          echo "RUNNER_OS:  ${RUNNER_OS}"               # RUNNER_OS:  Linux


          echo ${VERSION_MAJOR}                         # 0
          echo ${VERSION_MINOR}                         # 12
          echo ${VERSION_FLAVOR}                        # d
          echo ${{ steps.get_ver_prefix.outputs.ver_prefix }} # 0.12d
          echo ${{ env.BUILD_RUN_NUMBER }}              # 24
          echo ${{ steps.get_git_sha.outputs.git_sha }} # 6bec57ab
          echo ${{ steps.get_ver_prefix.outputs.ver_prefix }}${{ env.BUILD_RUN_NUMBER }}_${{ steps.get_git_sha.outputs.git_sha }}  # 0.12d24_6bec57ab

      - name: Testing Secrets
        run: | 
          echo "$DEVOPS"
          if [ "$DEVOPS" == "DevOpsHint"]
          then
            echo "Our secret"
          fi
        env:
          DEVOPS: ${{ secrets.SECRETS_TOKEN }}

  build:
    needs: [get_build_name_with_sha]
    runs-on: ubuntu-latest

    #container:
    #  image: docker://chewielabs/devenv:version-1.6
    #  credentials:
    #    username: ${{ secrets.DOCKER_HUB_USERNAME }}
    #    password: ${{ secrets.DOCKER_HUB_TOKEN }}

    steps:
      - name: work around permission issue, GitHub Actions #760
        run: echo "more details......"

      - name: Checkout the code
        run: echo "more details......"

      - name: Build CLI, BLO
        run: echo "more details......"

      - name: Build ESP32 Project
        run: echo "more details......"

      - name: Build ESP32 Project release
        run: echo "more details......"

  host_unit_test:
    needs: [get_build_name_with_sha, build]
    runs-on: ubuntu-latest
    steps:
      - name: work around permission issue, GitHub Actions #760       
        run: echo "more details......"

  check_for_gateway:
    runs-on: aws-lager-runner
    name: Check for existance of a gateway
    #container:
    #  image: docker://lagerdata/lager-cli
    #  env:
    #    LAGER_TOKEN_ID: ${{ secrets.LAGER_TOKEN_ID }}
    #    LAGER_TOKEN_SECRET: ${{ secrets.LAGER_TOKEN_SECRET }}
    #outputs:
    #  gateway_state: ${{ steps.confirm_gateway_online.outputs.is_online }}
    steps:
      - id: confirm_gateway_online
        continue-on-error: true
        name: check if gateway is online
    #    run: lager gateway hello>/dev/null;if (test $? -gt 0); then echo "::set-output name=is_online::false"; fi
        run: echo "more details......"

  connect_debugger:
    needs: [check_for_gateway]
    #if: ${{ needs.check_for_gateway.outputs.is_online != 'false' }}
    runs-on: aws-lager-runner
    #container:
    #  image: docker://lagerdata/lager-cli
    #  env:
    #    LAGER_TOKEN_ID: ${{ secrets.LAGER_TOKEN_ID }}
    #    LAGER_TOKEN_SECRET: ${{ secrets.LAGER_TOKEN_SECRET }}

    steps:
      - name: Connect to SWD
    #    run: lager connect --device at91sam4sd32x --interface cmsis-dap --transport swd --speed 1000 --force   
        run: echo "more details......"

  flash_sam4s:
    runs-on: aws-lager-runner
    #container:
    #  image: docker://lagerdata/lager-cli
    #  env:
    #    LAGER_TOKEN_ID: ${{ secrets.LAGER_TOKEN_ID }}
    #    LAGER_TOKEN_SECRET: ${{ secrets.LAGER_TOKEN_SECRET }}

    needs: [get_build_name_with_sha, connect_debugger, build]

    steps:
      - name: Download NFF artifact       
        run: echo "more details......"

  flash_esp32:
    runs-on: aws-lager-runner
    #container:
    #  image: docker://lagerdata/devenv-cortexm-minimal:version-1.2
    #  env:
    #    LAGER_TOKEN_ID: ${{ secrets.LAGER_TOKEN_ID }}
    #    LAGER_TOKEN_SECRET: ${{ secrets.LAGER_TOKEN_SECRET }}

    needs: [get_build_name_with_sha, build, check_for_gateway]
    #if: ${{ needs.check_for_gateway.outputs.is_online != 'false' }}
    steps:
      - name: Download NFF artifact
        run: echo "more details......"

  ota_release:
    needs: [build, get_build_name_with_sha]
    if: ${{ github.event_name == 'workflow_dispatch' }}
    uses: ./.github/workflows/ota.yaml
    with:
      version: ${{ needs.get_build_name_with_sha.outputs.BUILD_NAME_WITH_SHA }}

  symbol_upload:
    needs: [build, get_build_name_with_sha]
    if: ${{ github.event_name == 'workflow_dispatch' || github.event_name == 'schedule' }}
    uses: ./.github/workflows/symbol_upload.yaml
    with:
      version: ${{ needs.get_build_name_with_sha.outputs.BUILD_NAME_WITH_SHA }}
      

  upload_to_gdrive:
    needs: [ build, get_build_name_with_sha ]
    runs-on: ubuntu-latest
    permissions:
      contents: 'read'
      id-token: 'write'
    steps:
      - uses: actions/checkout@v2
      - name: 'Authenticate to Google Cloud'
        run: echo "more details......"

  publish_failures_to_slack:
    needs: [build, flash_sam4s, flash_esp32, upload_to_gdrive, host_unit_test]
    runs-on: ubuntu-latest
    if: failure() && github.ref == 'refs/heads/main'
    continue-on-error: true  # Don't allow this step to fail the build.
    steps:
      - name: Notify slack fail
        run: echo "more details......"
